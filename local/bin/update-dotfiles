#!/bin/sh

# constants

github_address=https://github.com


# functions

info() {
  echo "$@" >&2
}

fail() {
  info "$@"
  exit 1
}

info_installing() {
  info "$(basename $0): Installing" "$@" "..."
}

is_x86_64() {
  [ "$(uname -m)" = x86_64 ]
}

gem_install() {
  gem install "$@" && gem update "$@"
}

install_elm_format() {
  info_installing "elm-format" &&

  if is_x86_64 && uname -a | grep Linux
  then
    file=/tmp/elm-format-$$.tgz
    curl -sSL $github_address/avh4/elm-format/releases/download/0.6.0-alpha/elm-format-0.18-0.6.0-alpha-linux-x64.tgz > $file &&
    ( cd $(dirname $file) && tar xf $file ) &&
    mv /tmp/elm-format ~/.local/bin
  fi
}

install_haskell_packages() {
  info_installing "haskell packages" &&

  install_elm_format

  # Cabal doesn't work on low-memory systems.
  # if which cabal
  # then
  #   cabal update
  #   cabal install --upgrade-dependencies ShellCheck
  # fi
}

install_go_packages() {
  info_installing "go packages" &&

  go get -u \
      golang.org/x/lint/golint \
      golang.org/x/tools/cmd/... \
      github.com/alecthomas/gometalinter \
      github.com/fatih/hclfmt \
      github.com/junegunn/fzf \
      github.com/github/hub \
      github.com/hashicorp/terraform \
      github.com/k0kubun/pp \
      github.com/motemen/ghq \
      github.com/motemen/gore \
      github.com/nsf/gocode \
      github.com/raviqqe/bstie \
      github.com/raviqqe/liche \
      github.com/xo/usql &&
      # github.com/ethereum/go-ethereum/cmd/geth \

  gometalinter --install
}

install_python_packages() {
  info_installing "python packages" &&
  pip3 install --user --upgrade \
      autopep8 awscli codemod flake8 frosted httpie mkdocs mypy shakyo pylama \
      pylint twine vim-vint
}

install_ruby_gems() {
  info_installing "ruby gems" &&
  gem_install aruba bundler gitlab gist rubocop sass
}

install_ruby_gem_credential() {
  info_installing "ruby gem credentials"

  local credential_file=$HOME/.gem/credentials

  if [ ! -r "$credential_file" ]
  then
    mkdir -p $(dirname $credential_file) &&
    curl -u raviqqe https://rubygems.org/api/v1/api_key.yaml \
         > "$credential_file" &&
    chmod 600 "$credential_file"
  fi
}

install_node_packages() {
  info_installing "node packages" &&

  npm install --global --ignore-scripts \
      babel-eslint depcheck diff-so-fancy gulp \
      js-beautify jshint jsonlint leasot \
      remark-cli serverless stylelint stylelint-config-standard \
      svg-term-cli tldr tslint typescript typescript-formatter &&

  npm update --global
}

install_vim_plug() {
  info_installing "vim-plug" &&
  curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
}

install_vim_plugins() {
  install_vim_plug &&
  info_installing "neovim plugins" &&

  if which pip2
  then
    pip2 install --user --upgrade neovim
  fi &&

  pip3 install --user --upgrade neovim &&
  gem_install neovim
  nvim +PlugUpgrade +PlugClean! +PlugUpdate +UpdateRemotePlugins +qall
}

install_zplug() {
  info_installing "zplug" &&
  git clone-or-update $github_address/zplug/zplug $HOME/.zplug
}

install_zsh_plugins() {
  install_zplug &&
  info_installing "zsh plugins" &&
  zsh -c ". $HOME/.zprofile && . $HOME/.zshrc"
}

install_dwm() {
  info_installing "dwm" &&

  ghq get raviqqe/dwm &&
  (
    cd $HOME/src/github.com/raviqqe/dwm &&
    git checkout freebsd-theme &&
    make &&
    cp dwm $HOME/.local/bin
  )
}

install_tpm() {
  info_installing "tpm" &&
  git clone-or-update "$github_address/tmux-plugins/tpm" "$HOME/.tmux/plugins/tpm"
}

install_wallpapers() {
  info_installing "wallpapers" &&
  git clone-or-update https://git.raviqqe.com/funny/wallpapers.git \
                   "$HOME/.wallpapers"
}

check_args() {
  if [ $# -ne 0 ]
  then
    fail "usage: $(basename $0) [-bdh]"
  fi
}


# main routine

main() {
  while getopts bdhlv option
  do
    case $option in
    b)
      batch=true
      ;;
    d)
      desktop=true
      ;;
    h)
      homebrew=false
      ;;
    esac
  done
  shift $(expr $OPTIND - 1)

  check_args "$@"

  (
    . $HOME/.profile &&

    if [ -z "$homebrew" ]
    then
      update homebrew ${desktop:+-d}
    fi &&

    install_zsh_plugins &&
    install_tpm &&
    install_python_packages &&
    install_ruby_gems &&
    install_node_packages &&
    install_haskell_packages &&

    install_go_packages &&
    update rust &&
    update gcp &&

    if [ -n "$desktop" ]
    then
      install_dwm &&
      install_wallpapers
    fi &&

    if [ -z "$batch" ]
    then
      install_ruby_gem_credential &&
      install_vim_plugins
    fi
  ) ||

  fail "Failed to initialize dotfiles environment."
}

main "$@"
